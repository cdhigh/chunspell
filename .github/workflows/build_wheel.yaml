name: Build wheels and publish to pypi

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "The branch, tag or SHA to release from"
        required: true
        default: "master"

jobs:
  os-built-distributions:
    if: false
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          submodules: true

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up dependencies on macOS
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install autoconf automake gettext pkg-config libtool hunspell python

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install build dependencies
        run: python -m pip install --upgrade cibuildwheel

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_SKIP: "cp36-* cp37-*" # Skip CPython 3.6 and CPython 3.7
          #CIBW_ARCHS_MACOS: "x86_64 universal2 arm64"
          CIBW_ARCHS_LINUX: "auto aarch64"
          #CIBW_REPAIR_WHEEL_COMMAND_MACOS: "delocate-wheel --require-archs {delocate_archs} -w {dest_dir}/repaired_wheel -v {dest_dir}/*.whl"
          CIBW_BEFORE_BUILD_LINUX: |
            if [ -f /etc/debian_version ]; then
              apt update && apt install -y autoconf dh-autoreconf automake autopoint gettext pkg-config libtool libhunspell-dev python3-dev
            elif [ -f /etc/alpine-release ]; then
              apk add autoconf automake libtool gettext-dev python3-dev hunspell-dev linux-headers alpine-sdk
            elif [ -f /etc/redhat-release ]; then
              yum install -y autoconf automake gettext-devel pkgconfig libtool hunspell-devel python3-devel
            else
              echo "Unsupported platform"
              exit 1
            fi

      - name: Upload Wheels
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions-${{ matrix.os }}
          path: ./wheelhouse/*.whl

freebsd-build:
    name: Build on FreeBSD
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          submodules: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Download FreeBSD qcow2 image
        run: |
          wget https://download.freebsd.org/ftp/releases/VM-IMAGES/13.3-RELEASE/amd64/Latest/FreeBSD-13.3-RELEASE-amd64.qcow2.xz
          xz -d FreeBSD-13.3-RELEASE-amd64.qcow2.xz

      - name: Run FreeBSD VM
        run: |
          qemu-system-x86_64 -m 4G -hda FreeBSD-13.3-RELEASE-amd64.qcow2.xz -net user,hostfwd=tcp::2222-:22 -net nic -nographic -daemonize
          sleep 60
          ssh-keygen -R [localhost]:2222
          ssh-keyscan -p 2222 localhost >> ~/.ssh/known_hosts

      - name: Copy code to VM
        run: |
          tar czf source.tar.gz --exclude='.git' --exclude='source.tar.gz' .
          scp -P 2222 source.tar.gz freebsd@localhost:/home/freebsd/
          ssh -p 2222 -o StrictHostKeyChecking=no freebsd@localhost 'tar xzf source.tar.gz'

      - name: Install dependencies in VM
        run: |
          ssh -p 2222 -o StrictHostKeyChecking=no freebsd@localhost 'pkg install -y python3 py38-pip'
          ssh -p 2222 -o StrictHostKeyChecking=no freebsd@localhost 'pip install cibuildwheel'

      - name: Build wheels in VM
        run: |
          ssh -p 2222 -o StrictHostKeyChecking=no freebsd@localhost 'cd $(basename $(pwd)) && cibuildwheel --output-dir wheelhouse'

      - name: Copy built wheels back to host
        run: |
          scp -P 2222 freebsd@localhost:/home/freebsd/$(basename $(pwd))/wheelhouse/*.whl .

      - name: Upload Wheels
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions-freebsd
          path: '*.whl'

  source-distribution:
    name: Build source distribution
    runs-on: ubuntu-latest
    needs:
      - os-built-distributions
      - freebsd-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          submodules: true

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf automake autopoint gettext pkg-config libtool

      - name: Install build dependencies
        run: python -m pip install --upgrade setuptools wheel

      - name: Create source tarball
        run: python setup.py sdist

      - name: Store the source distribution
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions-source
          path: dist/*.tar.gz
          retention-days: 4

  publish:
    if: true
    needs:
      - os-built-distributions
      - freebsd-build
      - source-distribution
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          pattern: python-package-distributions-*
          merge-multiple: true
          path: dist/

      - name: What will we publish?
        run: ls -l dist

      - name: Publish package
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
            twine check dist/*
            twine upload dist/*
